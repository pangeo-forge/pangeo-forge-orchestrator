name: Test Dataflow Integration

on:
  deployment_status:
  # TODO: add on 'schedule' against staging deployment?
  pull_request:
    branches: ['main']
    types: [labeled]

jobs:
  test:
    # run when:
    #  - a PR is labeled 'test-dataflow'
    #    (assuming it is also labeled 'build-review-app'
    #    *and* the deployment for the head sha is a success)
    #  - heroku marks a deployment with 'state' == 'success'
    #    (assuming PR also has 'test-dataflow' label)
    runs-on: ubuntu-latest
    steps:
      # conditional step if triggering event is a pull_request
      - name: Maybe set REVIEW_APP_URL and DEPLOYMENT_STATE from pull_request
        if: |
          github.event_name == 'pull_request'
          && github.event.label.name == 'test-dataflow'
          && contains( github.event.pull_request.labels.*.name, 'build-review-app')
        # if we get here, this is a pull request, so we need to know the statuses url
        # for the deployment associated with the head sha. we use the **base** repo
        # deployments url, and look for deployments associated with pr's head sha.
        # (the head repo deployments url would cause errors, if the pr is from a fork.)
        run: |
          export DEPLOYMENTS_URL=\
          ${{ github.event.pull_request.base.repo.deployments_url }}\
          \?environment\=pforge-pr-${{ github.event.pull_request.number }}\
          \&sha\=${{ github.event.pull_request.head.sha }}
          curl -s $DEPLOYMENTS_URL \
          | python3 -c "
          import sys, json; print(json.load(sys.stdin)[0]['statuses_url'])" \
          | xargs -I{} curl -s {} \
          | python3 -c "
          import sys, json;
          d = json.load(sys.stdin)[-1];
          print('DEPLOYMENT_STATE=' + d['state'] + '\nREVIEW_APP_URL=' + d['environment_url']);" \
          >> $GITHUB_ENV

      # conditional step if triggering event is deployment_status
      - name: Maybe set REVIEW_APP_URL and DEPLOYMENT_STATE from deployment_status
        if: |
          github.event_name == 'deployment_status'
          && contains( github.event.pull_request.labels.*.name, 'test-dataflow')
        run: |
          echo 'REVIEW_APP_URL=${{ github.event.deployment_status.environment_url }}
          DEPLOYMENT_STATE=${{ github.event.deployment_status.state }}' \
          >> $GITHUB_ENV

      - name: Is app up?
        # NOTE: Heroku updates deployment as 'success' when build succeedes, not when release succeedes.
        # So there is actually still a latency between setting this status, and when the review app is
        # ready to receive payloads. Hmm...
        if: ${{ env.DEPLOYMENT_STATE == 'success' }}
        #   - check to see if app has been released (or if it's just been built)
        #   - if only built, then sleep until it's been released
        run: |
          curl -s env.REVIEW_APP_URL \
          | python3 -c "
          import sys;
          IS_UP = True if sys.stdin.read() == '{\"status\":\"ok\"}' else False; print(f'{IS_UP=}')" \
          >> $GITHUB_ENV

      - name: Run test
        if: |
          env.DEPLOYMENT_STATE == 'success'
          && contains( github.event.pull_request.labels.*.name, 'test-dataflow')
          && env.IS_UP == 'True'
        # TODO:
        #   - programatically make a /run comment on an existing PR in pforgetest
        #   - check to ensure a dataflow job was submitted within a plausible timeframe
        #   - wait for the job to complete (5-6 mins)
        #   - check to make sure the job was successful
        run: |
          echo foo
