# This file is for local testing only, see:
# https://devcenter.heroku.com/articles/local-development-with-docker-compose
# Deployment is configured in `heroku.yml` & `app.json`

version: '3'
services:
  web:
    # For platform spec, see https://stackoverflow.com/a/70238851
    platform: linux/amd64
    build: .
    ports:
      - '3000:8000'
    depends_on:
      - db
    volumes:
      # See SOPS_AGE_KEY_FILE in `environment:` below for details.
      - ${PWD}/key.txt:/var/sops/key.txt
    environment:
      # Nearly the same config as for postgres service in `.github/workflows/main.yaml`,
      # with exception of hostname. For hostname, see https://docs.docker.com/compose/networking/
      DATABASE_URL: 'postgres://postgres_user:postgres_password@db:5432/postgres_db'
      PANGEO_FORGE_DEPLOYMENT: 'local'
      # In Heroku, we use the SOPS_AGE_KEY variable instead, for description of both options, see:
      # https://github.com/mozilla/sops#22encrypting-using-age
      SOPS_AGE_KEY_FILE: '/var/sops/key.txt'
    # Note on this entrypoint:
    # - Sleep at start to allow postgres enought time to start. There are some more involved
    #   solutions to this problem at https://docs.docker.com/compose/startup-order/, but because
    #   this is just for testing, I think this should be enough, and is much lighter weight.
    # - The commands following sleep combine the `release` and `web` directives from `heroku.yml`,
    #   with the following small differences:
    #     - docker-compose spec requires double $$ for string interpolation (vs. single $)
    #     - Only running one gunicorn worker here (as opposed to 4 in production). Specifying more
    #       than 1 worker fails in this context.
    #     - We bind to 0.0.0.0 (as opposed to default 127.0.0.1) to make port binding to host work
    entrypoint: >
      /bin/sh -c 'sleep 1
      && python3 -m alembic upgrade head
      && sops -d -i ./secrets/config.$${PANGEO_FORGE_DEPLOYMENT}.yaml
      && gunicorn -w 1 -k uvicorn.workers.UvicornWorker pangeo_forge_orchestrator.api:app -b 0.0.0.0:8000'
  db:
    platform: linux/amd64
    image: postgres:latest
    ports:
      - '5432:5432'
    environment:
      # Identical config as for postgres service in `.github/workflows/main.yaml`
      POSTGRES_DB: postgres_db
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres_user
